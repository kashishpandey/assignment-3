DoublyLinkedList::DoublyLinkedList(){
  front = NULL;
  back = NULL;
  size = 0;
  }


DoublyLinkedList::~DoublyLinkedList(){
}

void DoublyLinkedList::insertFront(int d){
  ListNode *node = new ListNode(d);
  if(size == 0){
    //empty List
    back = node;
  }
  else{
    front->prev = node;
    node->next = front;
  }
  front = node;
  ++size;
}

void DoublyLinkedList::insertBack(int d){
  ListNode *node = new ListNode(d);
  if(front == NULL){
    front = back;
  }
  else{
    back->next = node;
    node->prev = back;
  }
  back = node;
  ++size;
}
// intentionally missed opening brace on line 38; once you compile this program it should return: Line 53: Expected { but not found 
int DoublyLinkedList::removeFront(int d)
  ListNode *curr = front;
  if(front->next == NULL){
    back = NULL;
  }
  else{
    front->next->prev = NULL;
  }
  front = front->next;
  curr->next = NULL;
  int temp = curr->data;

  --size;
  delete curr;
  return temp;
}

int DoublyLinkedList::removeBack(int d){
  ListNode *curr = back;
  if(front->next == NULL){
    back = NULL;
  }
  else{
    back->prev->next = NULL;
  }
  back = back->prev;
  curr->next = NULL;
  int temp = curr->data;

  --size;
  delete curr;

  return temp;
}


void DoublyLinkedList::printList(){
  ListNode *curr = front;

  while(curr != NULL){
    cout << curr -> data << endl; //printing out data in current pointer
    curr = curr -> next;
  }
}

int DoublyLinkedList::find(int value){
  int pos = -1;
  ListNode *curr = front;

  while(curr != NULL){
    ++pos;
    if(curr->data == value){
      break;
    }
    curr = curr -> next;
  }

  if(curr == NULL)
    pos = -1;
  return pos;

}
int DoublyLinkedList::deletePos(int pos){
  int p = 0;
  ListNode *curr = front;
  ListNode *prev = front;

  while(p != pos){
    prev = curr;
    curr = curr->next;
    p++;
  }

  prev->next = curr ->next;
  curr->next = NULL;

  int temp = curr->data;
  size--;

  delete curr;
  return temp;
}

int DoublyLinkedList::removeNode(int key){
  ListNode *curr = front;

  while(curr->data != key){
    curr = curr->next;

    if(curr == NULL){
      return -1;
  }

  //3 cases: front, back, or between
  if(curr = front ){
    front = curr -> next;
    front->prev = NULL;
  }
  else if(curr = back){
    back = curr->prev;
    back->next = NULL;
  }
  else{
    curr->prev->next = curr->next;
    curr->next->prev = curr->prev;
  }

  curr->next = NULL;
  curr->prev = NULL;

  int temp = curr->data;
  size--;
  delete curr;

  return temp;

}
}
